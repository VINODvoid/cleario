// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  email      String   @unique
  password   String
  firstName  String
  lastName   String
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  profile   UserProfile?
  portfolios Portfolio[]
  watchlists Watchlist[]
  alerts    Alert[]

  @@map("users")
}

model UserProfile {
  id                String    @id @default(cuid())
  userId            String    @unique
  riskTolerance     RiskLevel @default(MEDIUM)
  investmentGoals   String[]
  totalInvested     Decimal   @default(0)
  currentValue      Decimal   @default(0)
  preferredCurrency String    @default("USD")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Portfolio {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  holdings Holding[]

  @@map("portfolios")
}
model Holding{
  id          String   @id @default(cuid())
  portfolioId String
  symbol      String
  quantity    Decimal
  avgPrice    Decimal
  currentPrice Decimal?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt


  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  
  @@unique([portfolioId, symbol])
  @@map("holdings")
}

model Watchlist {
  id        String   @id @default(cuid())
  userId    String
  name      String
  symbols   String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("watchlists")
}
model Alert {
  id        String     @id @default(cuid())
  userId    String
  symbol    String
  type      AlertType
  condition String
  target    Decimal
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("alerts")
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
}

enum AlertType {
  PRICE_ABOVE
  PRICE_BELOW
  VOLUME_SPIKE
  TECHNICAL_INDICATOR
}